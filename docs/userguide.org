#+TITLE: Mikrokosmos
#+SUBTITLE: User's guide (v0.5.0)
#+SETUPFILE: html.setup

* Mikrokosmos

[[./icon.svg.png]]

*Mikrokosmos* is an untyped and simply typed \lambda-calculus
interpreter, borrowing its name from the series of progressive piano
études /[[https://www.youtube.com/watch?v=VEsMk3DAzWM][Mikrokosmos]]/ written by /Bela Bartok/. It aims to provide
students with a tool to learn and understand the [[https://en.wikipedia.org/wiki/Lambda_calculus#Informal_description][\lambda-calculus]].

* Installation
It should be possible to install Mikrokosmos only with the following
commands, provided that =cabal= and =pip= are installed

#+BEGIN_SRC sh
  cabal install mikrokosmos
  sudo pip install imikrokosmos
#+END_SRC

and the [[https://github.com/M42/mikrokosmos/tree/master/lib][libraries]] should be placed under =~/.mikrokosmos/=. The following
sections explain in more detail each step.

** Mikrokosmos
Mikrokosmos is installable from [[http://hackage.haskell.org/][Hackage]]; you can install it directly
from =cabal= using

#+BEGIN_EXAMPLE
  cabal update
  cabal install mikrokosmos
#+END_EXAMPLE

Binaries are available from the [[https://github.com/M42/mikrokosmos/releases][GitHub repository]].
You can also install it by cloning the git repository and using
[[https://www.haskell.org/cabal/][cabal]], as in

#+BEGIN_SRC sh
  git clone https://github.com/M42/mikrokosmos.git
  cd mikrokosmos
  cabal install
#+END_SRC

or using [[https://docs.haskellstack.org/en/stable/README/][stack]]

#+BEGIN_SRC sh
  git clone https://github.com/M42/mikrokosmos.git
  cd mikrokosmos
  stack install
#+END_SRC

If you have =ghc= version 8 or greater you can also compile it directly
as

#+BEGIN_SRC sh
  git clone https://github.com/M42/mikrokosmos.git
  cd mikrokosmos
  ghc Main.hs
#+END_SRC

but you will need to check for dependencies first.

** Libraries
Mikrokosmos comes bundled with a set of lambda calculus libraries.
You can find them in the =./lib= folder of the git repository. 

To load them into the interpreter, they must be placed under your home
directory in a folder called =~/.mikrokosmos=, or, more easily, in the
current working directory. Mikrokosmos looks for libraries on the following
list of directories

#+BEGIN_EXAMPLE
~/
~/.mikrokosmos/
./
./lib/
#+END_EXAMPLE

** Jupyter kernel
The [[https://jupyter.org/][Jupyter]] kernel can be installed with

#+BEGIN_SRC bash
sudo pip install imikrokosmos
#+END_SRC

*** Manual installation
It is possible to install the kernel putting the files under
=jupyter-mikrokosmos= on their directories. Three files are needed for
it to work.

 * =kernel.js= and =kernel.json= must be placed in one of the following
   paths

   #+BEGIN_SRC bash
   ~/.local/share/jupyter/kernels/jupyter-mikrokosmos/
   /usr/share/jupyter/kernels/jupyter-mikrokosmos/
   #+END_SRC
   
   this can be achieved automatically with

   #+BEGIN_SRC bash
   cd mikrokosmos
   sudo jupyter kernelspec install jupyter-mikrokosmos
   #+END_SRC

 * the =mikrokosmoskernel.py= file must available for Python on the
   working directory, or, more generally, on the [[https://docs.python.org/2/library/sys.html#sys.path][sys-path]]. This can be
   achieved simply by installing it with pip as

   #+BEGIN_SRC bash
   sudo pip install imikrokosmos
   #+END_SRC

   You can check the value of =sys.path= on your python interpreter and
   copy manually the script to one of those locations.

* First steps
** First steps on the command line interpreter
Once [[*Mikrokosmos][installed]], the interpreter can be opened by executing
=mikrokosmos= in a terminal. It will open a prompt where lambda expressions
can be evaluated:

#+CAPTION: First steps
[[https://cloud.githubusercontent.com/assets/5337877/18649151/337c6782-7ebe-11e6-9701-495c2cb40675.gif]]

You can write expressions using =\x.= to denote a lambda abstraction
on the =x= variable and you can bind names to expressions using ===.
As you can see in the image, whenever the interpreter finds a known
constant, it labels the expression with its name.

If you need help with at any moment, you can type =:help= into the prompt to
get a summary of the available interpreter options

#+BEGIN_EXAMPLE
Commands available from the prompt:
	<expression>	 evaluates the expression
	:quit       	 quits the interpreter
	:load <file>	 loads the given .mkr library or script
	:verbose    	 sets verbose mode on/off
	:help       	 shows this help
#+END_EXAMPLE

** First steps with the Jupyter kernel
If Jupyter and the Mikrokosmos Jupyter kernel are installed, a Jupyter
Notebook server can be started by executing =jupyter notebook=. You can
see more information in how to use a Jupyter notebook server [[http://jupyter.readthedocs.io/en/latest/running.html][here]].

Once a notebook is opened, the mikrokosmos kernel can be selected in the
menu =Kernel > Change kernel > IMikrokosmos=.

#+CAPTION: Jupyter Notebook using the Mikrokosmos kernel
[[./images/jupyternotebook.png]]

Multiple expressions can be evaluated in one cell. Each line will be evaluated
separately.

* The Mikrokosmos interpreter
The interpreter acts as a REPL where commands and expressions can be evaluated.
The following options are available both to the command line interpreter and to
the Jupyter kernel.

The =:help= option shows all the available commands

#+BEGIN_EXAMPLE
Commands available from the prompt:
	<expression>		 evaluates the expression
	:quit       		 quits the interpreter
	:load <file>		 loads the given .mkr library or script
	:verbose <on/off> 	 sets verbose mode on/off
	:color <on/off> 	 sets color mode on/off
	:ski <on/off> 		 sets ski mode on/off
	:types <on/off> 	 untyped/simply typed lambda calculus
	:help       		 shows this help
#+END_EXAMPLE

** Verbose mode
The *verbose mode* makes the interpreter show every beta reduction it
performs. It is useful if you want to check the step-by-step execution
of your lambda functions. It can be activated and deactivated by
executing =:verbose on= and =:verbose off=, and it will show you every
step on the reduction of the expression, coloring the substitution at
every step.

#+CAPTION: Verbose mode
[[./images/verbose.png]] 

The internal representation of the interpreter uses [[https://en.wikipedia.org/wiki/De_Bruijn_notation][DeBruijn notation]]. 
At every step, the term being substituted and its substitution are
signalled.

** SKI mode
The SKI mode shows every lambda expression in terms of SKI combinators.
It can be activated and deactivated by executing =:ski on= and =:ski off=.

** Color mode
Colored output is activated by default as it is very useful in
combination with the [[*Verbose mode][verbose mode]]. It can be deactivated however by
executing =:color off= in the interpreter; =:color on= will activate
the color again.

** Simply typed \lambda-calculus
Mikrokosmos uses untyped \lambda-calculus by default, but you can activate
the *simply-typed \lambda-calculus* interpreter using =:types on=. The syntax
is the same on both; but the differences with the untyped version are that

  * every term will be displayed with its type.
  * non-typeable expressions will not be computed. Instead, an error message
    will be showed if a type cannot be found for the expression.
  * every computation terminates. Non-terminating computation cannot be
    expressed on simply-typed lambda calculus.

In particular, Mikrokosmos can be used to check proofs on the implicational
fragment of the intuitionistic propositional logic.

[[./images/types.png]]

This implementation of simply typed \lambda-calculus is extended with
some more type constructors such as

|---------+--------------------------------------------------|
| Types   | Description                                      |
|---------+--------------------------------------------------|
| =A × B= | Product type, pairs of elements of type A and B. |
| =A + B= | Union type, disjoint union of A and B.           |
| =⊤=     | Unit type, with only one element.                |
| =⊥=     | Empty type.                                      |
|---------+--------------------------------------------------|

You can use these types with the built-in term constructors on the
language such as =INL=, =INR=, =ABORT=, =UNIT= or =(-,-)=; but it
is recommended to load the *types* library and work with the
[[*Type constructors][type constructors]] already available on the library.

* The Mikrokosmos language
The Mikrokosmos language aims to be a minimal implementation of pure
lambda calculus. A *tutorial on the language* can be found on
=tutorial.ipynb=.

** Lambda expressions
A lambda abstraction $(\lambda x. x)$ can be written as =\x.x=. Combinations
of alphanumeric characters are valid free variable names. Application
of lambda expressions is written by yuxtaposition. For example,

#+BEGIN_SRC haskell
(\a.a)(\a.a)
#+END_SRC

** Bindings
A expression can be bound to a name using the === operator as follows

#+BEGIN_SRC haskell
plus = \a.\b.\c.\d.((a c) ((b c) d))
#+END_SRC

** Comments
Comments must start with a =#=, both in the interpreter and in the
module code.

** Type constructors
When the =:types= option is on, and the =:load types= library is
loaded, a predefined set of typed constructors and destructors are
allowed on \lambda-expressions.

|-------------+-----------------------------------|
| Constructor | Type                              |
|-------------+-----------------------------------|
| =(-,-)=     | =A → B → A × B=                   |
| =inl=       | =A → A + B=                       |
| =inr=       | =B → A + B=                       |
| =unit=      | =⊤=                               |
| =caseof=    | =(A + B) → (A → C) → (B → C) → C= |
| =abort=     | =⊥ → A=                           |
| =absurd=    | =⊥ → ⊥=                           |
|-------------+-----------------------------------|

* Standard libraries
Mikrokosmos comes bundled with a set of libraries in the =./lib=
folder; if your installation does not provide you the libraries, you
can download the [[https://raw.githubusercontent.com/M42/mikrokosmos/master/std.mkr][library]] from the git repository. The installation
of libraries is discussed [[*Libraries][here]].

** Loading libraries
The reserved keyword =:load= is used to load libraries. If the library
name is =foo.mkr=, it will be loaded using =:load foo=. The standard
libraries are

 * =:load std= loads all the standard libraries.
 * =:load logic= loads simple boolean logic operators and constants, such
   as =true=, =and= or =ifelse=.
 * =:load nat= loads integer arithmetic operators such as =plus=, =zero=
   or =mult=.
 * =:load ski= loads SKI combinators.
 * =:load fixpoint= loads recursive functions and the fixpoint Y combinator.
 * =:load datastructures= loads lists and binary trees.

#+CAPTION: Standard library
[[./images/stdlib.png]]

All of this is written in pure lambda calculus! You can check the
definitions on the =.mkr= files.

** Advanced data structures
There are representations of structures such as linked lists or trees
in the standard library. You can use them to write more complex
operations

#+CAPTION: Trees
[[https://cloud.githubusercontent.com/assets/5337877/18883269/d7c3d616-84e2-11e6-9fc9-aa6e3df606f9.gif]]

** Writing libraries
You can write your own libraries as =*.mkr= files. Each line of
a library is interpreted in the same way it would be interpreted
on the command line interpreter.

* References & interesting links
The following are interesting links for those who want to learn more
about \lambda-calculus or how this interpreter has been built.

 - [[http://www.mscs.dal.ca/~selinger/papers/lambdanotes.pdf][Lecture notes on the lambda calculus - Peter Selinger]], being a series
   of notes on the \lambda-calculus from a mathematical perspective.

 - [[https://www.haskell.org/][The Haskell programming language]]. A complete, general purpose programming
   language based on a typed \lambda-calculus. Mikrokosmos itself has been
   written in Haskell.

 - [[https://github.com/goldfirere/glambda][The Glambda interpreter]], being another \lambda-calculus interpreter
   written in Haskell.

 - [[http://dev.stephendiehl.com/fun/003_lambda_calculus.html][Build you a Haskell - Stephen Diehl]], a tutorial in how to build your
   own \lambda-calculus interpreter in Haskell.

